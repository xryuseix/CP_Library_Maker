	"": {
		"prefix": "",
		"body": [
			"class LCA {",
			"\tint n;",
			"\tint MAX;",
			"\tvvi doubling, v;",
			"",
			"\tvoid init() {",
			"\t\trep(i, n) {",
			"\t\t\tfor(auto j : v[i]) {",
			"\t\t\t\tdoubling[0][j] = i;",
			"\t\t\t}",
			"\t\t}",
			"\t\tfor(int i = 1; i < MAX; i++) {",
			"\t\t\trep(j, n) {",
			"\t\t\t\tdoubling[i][j] = doubling[i - 1][doubling[i - 1][j]];",
			"\t\t\t}",
			"\t\t}",
			"\t\tdepth[0] = 0;",
			"\t\tdfs(0, -1);",
			"\t}",
			"",
			"\tvoid dfs(const int crrPos, const int befPos) {",
			"\t\tfor(auto i : v[crrPos]) {",
			"\t\t\tif(i == befPos || depth[i] != -1) {",
			"\t\t\t\tcontinue;",
			"\t\t\t}",
			"\t\t\tdepth[i] = depth[crrPos] + 1;",
			"\t\t\tdfs(i, crrPos);",
			"\t\t}",
			"\t}",
			"",
			"public:",
			"\tvi depth;",
			"",
			"\t// vは0が根のbfs木にする．親->子のように辺を張る．",
			"\tLCA(vvi &_v) : v(_v), n(_v.size()) {",
			"\t\tMAX = ceil(log2(n));",
			"\t\tdoubling = vvi(MAX, vi(n, 0));",
			"\t\tdepth = vi(n, -1);",
			"\t\tinit();",
			"\t}",
			"",
			"\tvoid show(const int height = 0) {",
			"\t\trep(i, ((!height)?MAX:height)) {",
			"\t\t\tdump(doubling[i]);",
			"\t\t}",
			"\t\tdump(depth);",
			"\t}",
			"",
			"\t// ダブリングでVのnum個親の祖先を調べる",
			"\tint doublingNode(int V, const int num) {",
			"\t\trep(i, MAX) {",
			"\t\t\tif((1LL<<i) & num) {",
			"\t\t\t\tV = doubling[i][V];",
			"\t\t\t}",
			"\t\t}",
			"\t\treturn V;",
			"\t}",
			"",
			"\tint lca(int A, int B) {",
			"\t\t// Aのが深い位置にあるようにする",
			"\t\tif(depth[A] < depth[B]) {",
			"\t\t\tswap(A, B);",
			"\t\t}",
			"\t\tA = doublingNode(A, depth[A] - depth[B]);",
			"\t\tif(A == B) {",
			"\t\t\treturn A;",
			"\t\t}",
			"\t\t",
			"\t\tint ng = -1;",
			"\t\tint ok = depth[A] + 1;",
			"\t\twhile(abs(ng - ok) > 1) {",
			"\t\t\tint mid = (ng + ok)/2;",
			"\t\t\tif(doublingNode(A, mid) != doublingNode(B, mid)) {",
			"\t\t\t\tng = mid;",
			"\t\t\t}",
			"\t\t\telse ok = mid;",
			"\t\t}",
			"\t\treturn  doublingNode(A, ng + 1);",
			"\t}",
			"};"
		],
		"description": ""
	}