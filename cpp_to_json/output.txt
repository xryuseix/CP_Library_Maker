	"": {
		"prefix": "",
		"body": [
			"// modint呼ぶ！！！",
			"",
			"class Counting {",
			"\tstruct pre_calculation {",
			"\t\tbool factorial;",
			"\t\tbool partition;",
			"\t\tbool combination;",
			"\t\tbool bell;",
			"\t};",
			"\tpre_calculation pre_calc;",
			"",
			"\tvector<mint> Factorial;",
			"\tvoid factorial_precalc(const int MAX = 301010) {",
			"\t\tFactorial = vector<mint>(MAX, 1);",
			"\t\tfor (int i = 1; i < MAX; i++) {",
			"\t\t\tFactorial[i] = Factorial[i - 1] * i;",
			"\t\t}",
			"\t}",
			"",
			"\tvector<mint> FactorialInv;",
			"\tvoid nCk_precalc(const int MAX = 301010) {",
			"\t\tif (!pre_calc.factorial) {",
			"\t\t\tfactorial_precalc();",
			"\t\t}",
			"\t\tFactorialInv = vector<mint>(MAX, 1);",
			"\t\tfor (int i = 1; i < MAX; i++) {",
			"\t\t\tFactorialInv[i] = mint(1).pow(Factorial[i], MOD - 2);",
			"\t\t}",
			"\t}",
			"",
			"\tvector<mint> Bell;",
			"\tvoid bell_precalc(const int MAX = 2020) {",
			"\t\tif (!pre_calc.factorial) {",
			"\t\t\tfactorial_precalc();",
			"\t\t}",
			"\t\tBell = vector<mint>(MAX, 1);",
			"\t\tfor (int j = 1; j < MAX; j++) {",
			"\t\t\tBell[j] = Bell[j - 1] + mint(0).pow(-1, j) / Factorial[j];",
			"\t\t}",
			"\t}",
			"",
			"\tvector<vector<mint>> Partition;",
			"\tvoid partition_precalc(const int MAX = 2020) {",
			"\t\tPartition = vector<vector<mint>>(MAX, vector<mint>(MAX, 0));",
			"\t\tfor (int k = 0; k < MAX; k++) {",
			"\t\t\tPartition[0][k] = 1;",
			"\t\t}",
			"\t\tfor (int n = 1; n < MAX; n++) {",
			"\t\t\tfor (int k = 1; k < MAX; k++) {",
			"\t\t\t\tPartition[n][k] = Partition[n][k - 1];",
			"\t\t\t\tif (n - k >= 0) {",
			"\t\t\t\t\tPartition[n][k] += Partition[n - k][k];",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"",
			"public:",
			"\tCounting(void) {",
			"\t\tpre_calc.factorial = false;",
			"\t\tpre_calc.partition = false;",
			"\t\tpre_calc.combination = false;",
			"\t\tpre_calc.bell = false;",
			"\t};",
			"",
			"\t// 階乗 n! を計算",
			"\tmint factorial(const mint n) {",
			"\t\tif (!pre_calc.factorial) {",
			"\t\t\tfactorial_precalc();",
			"\t\t\tpre_calc.factorial = true;",
			"\t\t}",
			"\t\treturn Factorial[n.x];",
			"\t}",
			"",
			"\t// 二項係数 nCk を計算",
			"\tmint nCk(const mint n, const mint k) {",
			"\t\tif (n < k) {",
			"\t\t\treturn 0;",
			"\t\t}",
			"\t\tif (!pre_calc.combination) {",
			"\t\t\tnCk_precalc();",
			"\t\t\tpre_calc.combination = true;",
			"\t\t}",
			"\t\tmint nl = Factorial[n.x];            // n!",
			"\t\tmint nkl = FactorialInv[n.x - k.x];  // (n-k)!",
			"\t\tmint kl = FactorialInv[k.x];         // k!",
			"\t\tmint nkk = (nkl.x * kl.x);",
			"\t\treturn nl * nkk;",
			"\t}",
			"",
			"\t// 順列 nPk を計算",
			"\tmint nPk(mint n, mint k) {",
			"\t\tif (n < k) {",
			"\t\t\treturn 0;",
			"\t\t}",
			"\t\tif (!pre_calc.factorial) {",
			"\t\t\tfactorial_precalc();",
			"\t\t\tpre_calc.factorial = true;",
			"\t\t}",
			"\t\treturn Factorial[n.x] / Factorial[n.x - k.x];",
			"\t}",
			"",
			"\t// 包除原理 \sum_{i=0}^k (-1)^{k-i} kCi i^n",
			"\tmint inclusion_exclusion(const mint n, const mint k) {",
			"\t\tif (!pre_calc.combination) {",
			"\t\t\tnCk_precalc();",
			"\t\t\tpre_calc.combination = true;",
			"\t\t}",
			"\t\tmint ans = 0;",
			"\t\tfor (int i = 0; i <= k.x; i++) {",
			"\t\t\tans += mint(0).pow(-1, k - i) * nCk(k, i) * mint(0).pow(i, n);",
			"\t\t}",
			"\t\treturn ans;",
			"\t}",
			"",
			"\t// スターリング数 S(n, k) を計算",
			"\tmint stirling(const mint n, const mint k) {",
			"\t\tmint res = inclusion_exclusion(n, k);",
			"\t\tres /= Factorial[k.x];",
			"\t\treturn res;",
			"\t}",
			"",
			"\t// ベル数 B(n, k) を計算",
			"\tmint bell(const mint n, const mint k) {",
			"\t\tif (!pre_calc.bell) {",
			"\t\t\tbell_precalc();",
			"\t\t\tpre_calc.bell = true;",
			"\t\t}",
			"\t\tmint ans = 0;",
			"\t\tfor (int i = 0; i <= k.x; i++) {",
			"\t\t\tans += mint(0).pow(i, n) / Factorial[i] * Bell[k.x - i];",
			"\t\t}",
			"\t\treturn ans;",
			"\t}",
			"",
			"\t// 分割数 P(n, k) を計算",
			"\t// n - k < 0 場合は別途，場合分けを行う",
			"\tmint partition(const mint n, const mint k) {",
			"\t\tif (n.x < 0) {",
			"\t\t\treturn 0;",
			"\t\t}",
			"\t\tif (!pre_calc.partition) {",
			"\t\t\tpartition_precalc();",
			"\t\t\tpre_calc.partition = true;",
			"\t\t}",
			"\t\treturn Partition[n.x][k.x];",
			"\t}",
			"};"
		],
		"description": ""
	}