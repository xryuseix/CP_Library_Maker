	"": {
		"prefix": "",
		"body": [
			"class UnionFind {",
			"public:",
			"\t// 親の番号を格納．親だった場合は-(その集合のサイズ)",
			"\tvector<int> Parent;",
			"\t// 重さの差を格納",
			"\tvector<ll> diffWeight;",
			"",
			"\tUnionFind(const int N) {",
			"\t\tParent = vector<int>(N, -1);",
			"\t\tdiffWeight = vector<ll>(N, 0);",
			"\t}",
			"",
			"\t// Aがどのグループに属しているか調べる",
			"\tint root(const int A) {",
			"\t\tif (Parent[A] < 0) return A;",
			"\t\tint Root = root(Parent[A]);",
			"\t\tdiffWeight[A] += diffWeight[Parent[A]];",
			"\t\treturn Parent[A] = Root;",
			"\t}",
			"",
			"\t// 自分のいるグループの頂点数を調べる",
			"\tint size(const int A) {",
			"\t\treturn -Parent[root(A)];",
			"\t}",
			"",
			"\t// 自分の重さを調べる",
			"\tll weight(const int A) {",
			"\t\troot(A); // 経路圧縮",
			"\t\treturn diffWeight[A];",
			"\t}",
			"",
			"\t// 重さの差を計算する",
			"\tll diff(const int A, const int B) {",
			"\t\treturn weight(B) - weight(A);",
			"\t}",
			"",
			"\t// AとBをくっ付ける",
			"\tbool connect(int A, int B, ll W = 0) {",
			"\t\t// Wをrootとの重み差分に変更",
			"\t\tW += weight(A);",
			"\t\tW -= weight(B);",
			"",
			"\t\t// AとBを直接つなぐのではなく、root(A)にroot(B)をくっつける",
			"\t\tA = root(A);",
			"\t\tB = root(B);",
			"",
			"\t\tif (A == B) {",
			"\t\t\t//すでにくっついてるからくっ付けない",
			"\t\t\treturn false;",
			"\t\t}",
			"",
			"\t\t// 大きい方(A)に小さいほう(B)をくっ付ける",
			"\t\t// 大小が逆だったらひっくり返す",
			"\t\tif (size(A) < size(B)) {",
			"\t\t\tswap(A, B);",
			"\t\t\tW = -W;",
			"\t\t}",
			"",
			"\t\t// Aのサイズを更新する",
			"\t\tParent[A] += Parent[B];",
			"\t\t// Bの親をAに変更する",
			"\t\tParent[B] = A;",
			"",
			"\t\t// AはBの親であることが確定しているのでBにWの重みを充てる",
			"\t\tdiffWeight[B] = W;",
			"",
			"\t\treturn true;",
			"\t}",
			"};
"
		],
		"description": ""
	}