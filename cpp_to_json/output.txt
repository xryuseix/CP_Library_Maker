	"": {
		"prefix": "",
		"body": [
			"class Bridge {",
			"\tint N, num = 0;",
			"\tvvi G;",
			"\tvi pre, low;",
			"\tvb isPassed;",
			"\tvpii bridges;",
			"",
			"\tint culcLow(const int v, const int bef) {",
			"\t\tint nowLow = num;",
			"\t\tlow[v] = pre[v] = nowLow;",
			"\t\tfor(auto ne : G[v]) {",
			"\t\t\tif(ne == bef) continue;",
			"\t\t\tif(ne == 0) {",
			"\t\t\t\tlow[0] = -1;",
			"\t\t\t}",
			"\t\t\tif(pre[ne] == -1) {",
			"\t\t\t\tnum++;",
			"\t\t\t\tculcLow(ne, v);",
			"\t\t\t}",
			"\t\t\tchmin(nowLow, low[ne]);",
			"\t\t}",
			"\t\treturn low[v] = nowLow;",
			"\t}",
			"",
			"\tvoid traceGraph(const int v, const int bef) {",
			"\t\tfor(auto ne : G[v]) {",
			"\t\t\tif(ne == bef) continue;",
			"\t\t\tif(!isPassed[ne]) {",
			"\t\t\t\tif(low[ne] == pre[ne]) {",
			"\t\t\t\t\tbridges.emplace_back(min(v, ne), max(v, ne));",
			"\t\t\t\t}",
			"\t\t\t\tisPassed[ne] = true;",
			"\t\t\t\ttraceGraph(ne, v);",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"",
			"public:",
			"\tBridge(const int _n, const vvi _G) : N(_n), G(_G) {",
			"\t\tpre = vi(N, -1);",
			"\t\tlow = vi(N, INF);",
			"\t\tisPassed = vb(N, false);",
			"\t\tisPassed[0] = true;",
			"\t}",
			"",
			"\tvoid findBridges() {",
			"\t\tculcLow(0, -1);",
			"\t\ttraceGraph(0, -1);",
			"\t\tSort(bridges);",
			"\t}",
			"",
			"\tvoid show() {",
			"\t\tfor(auto p : bridges) {",
			"\t\t\tcout << p.fi << \" \" << p.se << endl; ",
			"\t\t}",
			"\t}",
			"};"
		],
		"description": ""
	}