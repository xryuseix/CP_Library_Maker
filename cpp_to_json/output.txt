	"": {
		"prefix": "",
		"body": [
			"std::mt19937 mt{ std::random_device{}() };",
			"std::uniform_int_distribution<int> dist(129, INF);",
			"const int BASE = dist(mt);",
			"",
			"class RollingHash {",
			"public:",
			"\tstring str;",
			"\tvector<ull> powBase, csumHash;",
			"\tconst ull ROLMOD = (1LL << 61) - 1;",
			"\tconst ull MASK30 = (1LL << 30) - 1;",
			"\tconst ull MASK31 = (1LL << 31) - 1;",
			"\tconst ull LLMAX = ROLMOD*((1LL << 3) - 1);",
			"",
			"\tRollingHash(const string s) : str(s) {",
			"\t\tpowBase.resize(s.size() + 1);",
			"\t\tcsumHash.resize(s.size() + 1);",
			"\t\tpowBase[0] = 1;",
			"\t\tfor(int i = 0; i < s.size(); i++) {",
			"\t\t\tpowBase[i + 1] = calcMod(multiple(powBase[i], BASE));",
			"\t\t}",
			"\t}",
			"",
			"\tvoid rollingHash() {",
			"\t\tcsumHash[0] = 0;",
			"\t\tfor(int i = 0; i < str.size(); ++i) {",
			"\t\t\tcsumHash[i + 1] = calcMod(multiple(csumHash[i], BASE) + str[i]);",
			"\t\t}",
			"\t}",
			"",
			"\tull getHash(const int begin, const int length) {",
			"\t\treturn calcMod(csumHash[begin + length] + LLMAX - multiple(csumHash[begin], powBase[length]));",
			"\t}",
			"",
			"\tstring substr(const int begin) {",
			"\t\treturn str.substr(begin);",
			"\t}",
			"",
			"\tstring substr(const int begin, const int length) {",
			"\t\tif(length < 0) {",
			"\t\t\treturn str.substr(begin, str.size() + length - begin + 1);",
			"\t\t} else {",
			"\t\t\treturn str.substr(begin, length);",
			"\t\t}",
			"\t}",
			"",
			"private:",
			"\tull calcMod(const ull num) {",
			"\t\tconst ull modNum = (num & ROLMOD) + (num >> 61);",
			"\t\treturn (modNum >= ROLMOD) ? modNum - ROLMOD : modNum;",
			"\t}",
			"",
			"\tull multiple(const ull leftNum, const ull rightNum) {",
			"\t\tull lu = leftNum >> 31;",
			"\t\tull ld = leftNum & MASK31;",
			"\t\tull ru = rightNum >> 31;",
			"\t\tull rd = rightNum & MASK31;",
			"\t\tull middleBit = ld * ru + lu * rd;",
			"\t\treturn ((lu * ru) << 1) + ld * rd + ((middleBit & MASK30) << 31) + (middleBit >> 30);",
			"\t}",
			"",
			"};"
		],
		"description": ""
	}